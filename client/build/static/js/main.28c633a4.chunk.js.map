{"version":3,"sources":["hooks/use-previous.js","App.js","serviceWorker.js","index.js"],"names":["usePrevious","socketUrl","process","REACT_APP_ENDPOINT","App","useState","solarData","batteryData","generationStats","streamingData","setStreamingData","webSocket","useRef","useEffect","current","WebSocket","error","console","log","onopen","onmessage","message","JSON","parse","data","close","generateSuffix","label","lowerCaseLabel","toLowerCase","includes","className","map","index","key","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"kQAiBeA,ICRTC,EAAS,eAAWC,mHAAYC,oBAAsB,YAA7C,SAkGAC,EAhGH,WAAO,IAAD,EAC4BC,mBAAS,CAC/CC,UAAW,GACXC,YAAa,GACbC,gBAAiB,KAJP,mBACPC,EADO,KACQC,EADR,KAMRC,EAAYC,iBAAO,MAEzBC,qBAAU,WACN,IACIF,EAAUG,QAAU,IAAIC,UAAUd,GACpC,MAAOe,GACLC,QAAQC,IAAIF,GAehB,OAZAL,EAAUG,QAAQK,OAAS,WACvBF,QAAQC,IAAI,qBAGhBP,EAAUG,QAAQM,UAAY,SAACC,GAC3B,IACIX,EAAiBY,KAAKC,MAAMF,EAAQG,OACtC,MAAOR,GACLC,QAAQC,IAAIF,KAIb,WACHC,QAAQC,IAAI,kBACZP,EAAUG,QAAQW,WAEvB,IAEH,IAAMC,EAAiB,SAACC,GACpB,IAAMC,EAAiBD,EAAME,cAC7B,OAAID,EAAeE,SAAS,WAAmB,IAC3CF,EAAeE,SAAS,SAAiB,IACzCF,EAAeE,SAAS,WAAmB,IAC3CF,EAAeE,SAAS,aAAqB,YAAjD,GAGJ,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,UACX,6CAEJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,yBAAd,SACCtB,EAAcH,UAAU0B,KAAI,SAACR,EAAMS,GAAP,OACzB,yBAAKF,UAAU,uBAAuBG,IAAKD,GACvC,+BAAKT,EAAKG,OAAW,IACrB,2BACK,IACAH,EAAKW,MACN,0BAAMJ,UAAU,gCACXL,EAAeF,EAAKG,cAMzC,yBAAKI,UAAU,kBACX,wBAAIA,UAAU,yBAAd,WACCtB,EAAcF,YAAYyB,KAAI,SAACR,EAAMS,GAAP,OAC3B,yBAAKF,UAAU,uBAAuBG,IAAKD,GACvC,+BAAKT,EAAKG,OAAW,IACrB,2BACK,IACAH,EAAKW,MACN,0BAAMJ,UAAU,gCACXL,EAAeF,EAAKG,cAMzC,yBAAKI,UAAU,kBACX,wBAAIA,UAAU,yBAAd,qBACCtB,EAAcD,gBAAgBwB,KAAI,SAACR,EAAMS,GAAP,OAC/B,yBAAKF,UAAU,uBAAuBG,IAAKD,GACvC,2BAAIT,EAAKG,OACT,2BACKH,EAAKW,MACN,0BAAMJ,UAAU,gCACXL,EAAeF,EAAKG,iBCpFrCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLC,QAAQD,MAAMA,EAAMK,c","file":"static/js/main.28c633a4.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// Hook\nfunction usePrevious(value) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n\nexport default usePrevious;\n","import React, { useState, useEffect, useRef } from \"react\";\n\n// import { socketUrl } from \"./constants\";\n\nimport Data from \"./components/data\";\nimport Battery from \"./components/battery\";\n\nimport \"./App.scss\";\n\nconst socketUrl = `ws://${process.env.REACT_APP_ENDPOINT || \"localhost\"}:8080`;\n\nconst App = () => {\n    const [streamingData, setStreamingData] = useState({\n        solarData: [],\n        batteryData: [],\n        generationStats: [],\n    });\n    const webSocket = useRef(null);\n\n    useEffect(() => {\n        try {\n            webSocket.current = new WebSocket(socketUrl);\n        } catch (error) {\n            console.log(error);\n        }\n\n        webSocket.current.onopen = () => {\n            console.log(\"websocket opened\");\n        };\n\n        webSocket.current.onmessage = (message) => {\n            try {\n                setStreamingData(JSON.parse(message.data));\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        return () => {\n            console.log(\"closing socket\");\n            webSocket.current.close();\n        };\n    }, []);\n\n    const generateSuffix = (label) => {\n        const lowerCaseLabel = label.toLowerCase();\n        if (lowerCaseLabel.includes(\"voltage\")) return \"V\";\n        if (lowerCaseLabel.includes(\"power\")) return \"W\";\n        if (lowerCaseLabel.includes(\"current\")) return \"A\";\n        if (lowerCaseLabel.includes(\"generated\")) return \"kW/h\";\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <p>EP Solar - Pi</p>\n            </div>\n            <div className=\"container\">\n                <div className=\"data-container\">\n                    <h2 className=\"data-container__title\">Solar</h2>\n                    {streamingData.solarData.map((data, index) => (\n                        <div className=\"data-container__data\" key={index}>\n                            <p> {data.label}</p>{\" \"}\n                            <p>\n                                {\" \"}\n                                {data.value}\n                                <span className=\"data-container__data__suffix\">\n                                    {generateSuffix(data.label)}\n                                </span>\n                            </p>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"data-container\">\n                    <h2 className=\"data-container__title\">Battery</h2>\n                    {streamingData.batteryData.map((data, index) => (\n                        <div className=\"data-container__data\" key={index}>\n                            <p> {data.label}</p>{\" \"}\n                            <p>\n                                {\" \"}\n                                {data.value}\n                                <span className=\"data-container__data__suffix\">\n                                    {generateSuffix(data.label)}\n                                </span>\n                            </p>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"data-container\">\n                    <h2 className=\"data-container__title\">Energy Generation</h2>\n                    {streamingData.generationStats.map((data, index) => (\n                        <div className=\"data-container__data\" key={index}>\n                            <p>{data.label}</p>\n                            <p>\n                                {data.value}\n                                <span className=\"data-container__data__suffix\">\n                                    {generateSuffix(data.label)}\n                                </span>\n                            </p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}