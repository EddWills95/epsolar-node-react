{"version":3,"sources":["constants.js","components/battery/index.jsx","components/data/index.jsx","App.js","serviceWorker.js","index.js"],"names":["socketUrl","process","REACT_APP_ENDPOINT","React","memo","state","className","id","style","width","Data","data","title","endpoint","useState","undefined","chartData","setChartData","showChart","setShowChart","handleShowHideData","a","fetch","then","response","json","map","i","value","index","key","label","lowerCaseLabel","toLowerCase","includes","generateSuffix","onClick","type","series","name","options","chart","height","zoom","enabled","dataLabels","stroke","curve","grid","row","colors","opacity","App","solarData","batteryData","generationStats","streamingData","setStreamingData","webSocket","useRef","useEffect","current","WebSocket","error","console","log","onopen","onmessage","message","JSON","parse","close","SOC","find","d","stateOfChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"0NAAaA,EAAS,eAClBC,mHAAYC,oBAAsB,eADhB,SC8BPC,GD3BS,iBACpBF,mHAAYC,oBAAsB,eADd,S,MC2BTC,IAAMC,MAzBL,SAAC,GAAmB,IAAD,IAAhBC,aAAgB,MAAR,EAAQ,EAMjC,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBACEC,GAAG,eACHC,MAAO,CAAEC,MART,GAAN,OAD0B,IAARJ,EAAe,EACjC,UAYE,yBAAKC,UAAU,gBACf,8BAAe,IAARD,EAAP,U,uCCgESK,EAlFF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACRC,wBAASC,GADD,mBACnCC,EADmC,KACxBC,EADwB,OAERH,oBAAS,GAFD,mBAEnCI,EAFmC,KAExBC,EAFwB,KAYpCC,EAAkB,uCAAG,sBAAAC,EAAA,yDACpBL,EADoB,gCAEjBM,MAAM,4BAAD,OAA6BT,IACrCU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUA,EAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,YACjCL,MAAK,SAACZ,GACLQ,GAAa,GACbF,EAAaN,MAPM,WAYrBK,IAAaE,EAZQ,uBAavBC,GAAa,GAbU,0BAiBzBA,GAAa,GAjBY,2CAAH,qDA0CxB,OACE,yBAAKb,UAAU,kBACb,wBAAIA,UAAU,yBAAyBM,GACtCD,EAAKe,KAAI,SAACf,EAAMkB,GAAP,OACR,yBAAKvB,UAAU,uBAAuBwB,IAAKD,GACzC,2BAAIlB,EAAKoB,OACT,2BACGpB,EAAKiB,MACN,0BAAMtB,UAAU,gCA1DH,SAACyB,GACtB,IAAMC,EAAiBD,EAAME,cAC7B,OAAID,EAAeE,SAAS,WAAmB,IAC3CF,EAAeE,SAAS,SAAiB,IACzCF,EAAeE,SAAS,WAAmB,IAC3CF,EAAeE,SAAS,aAAqB,YAAjD,EAsDWC,CAAexB,EAAKoB,aAK7B,4BAAQzB,UAAU,yBAAyB8B,QAAShB,GACjDF,EAAY,OAAS,OADxB,eAGCA,GACC,kBAAC,IAAD,CACEmB,KAAK,OACLC,OAAQ,CAAC,CAAEC,KAAM3B,EAAOD,KAAMK,IAC9BwB,QA3CQ,CACdC,MAAO,CACLC,OAAQ,IACRL,KAAM,OACNM,KAAM,CACJC,SAAS,IAGbC,WAAY,CACVD,SAAS,GAEXE,OAAQ,CACNC,MAAO,YAETC,KAAM,CACJC,IAAK,CACHC,OAAQ,CAAC,UAAW,eACpBC,QAAS,UCwBFC,G,MAnEH,WAAO,IAAD,EAC4BtC,mBAAS,CAC/CuC,UAAW,GACXC,YAAa,GACbC,gBAAiB,KAJP,mBACPC,EADO,KACQC,EADR,KAMRC,EAAYC,iBAAO,MAEzBC,qBAAU,WACN,IACIF,EAAUG,QAAU,IAAIC,UAAU9D,GACpC,MAAO+D,GACLC,QAAQC,IAAIF,GAehB,OAZAL,EAAUG,QAAQK,OAAS,WACvBF,QAAQC,IAAI,qBAGhBP,EAAUG,QAAQM,UAAY,SAACC,GAC3B,IACIX,EAAiBY,KAAKC,MAAMF,EAAQzD,OACtC,MAAOoD,GACLC,QAAQC,IAAIF,KAIb,WACHC,QAAQC,IAAI,kBACZP,EAAUG,QAAQU,WAEvB,IAUH,OACI,yBAAKjE,UAAU,OACX,yBAAKA,UAAU,UACX,4CACA,kBAAC,EAAD,CAASD,MAZC,WAClB,IAAMmE,EAAMhB,EAAcF,YAAYmB,MAClC,SAACC,GAAD,MAAmB,gBAAZA,EAAE3C,SAEb,OAAKyC,EACEA,EAAI5C,MADM,EAQO+C,MAEpB,yBAAKrE,UAAU,aACX,kBAAC,EAAD,CACIM,MAAM,QACND,KAAM6C,EAAcH,UACpBxC,SAAS,UAEb,kBAAC,EAAD,CACID,MAAM,UACND,KAAM6C,EAAcF,YACpBzC,SAAS,YAEb,kBAAC,EAAD,CACID,MAAM,mBACND,KAAM6C,EAAcD,sBCzDpBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLC,QAAQD,MAAMA,EAAMK,a","file":"static/js/main.e8c11ff9.chunk.js","sourcesContent":["export const socketUrl = `ws://${\n    process.env.REACT_APP_ENDPOINT || \"192.168.0.55\"\n}:8080`;\nexport const endpointUrl = `http://${\n    process.env.REACT_APP_ENDPOINT || \"192.168.0.55\"\n}:8080`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./style.scss\";\n\nconst Battery = ({ state = 0 }) => {\n  const calculateWidth = () => {\n    const newWidth = (state * 100) / 4;\n    return `${newWidth}px`;\n  };\n\n  return (\n    <div className=\"batteryContainer\">\n      <div className=\"batteryOuter\">\n        <div\n          id=\"batteryLevel\"\n          style={{ width: calculateWidth() }}\n        >\n        </div>\n      </div>\n      <div className=\"batteryBump\"></div>\n      <span>{state * 100}%</span>\n    </div>\n  );\n};\n\nBattery.propTypes = {\n  state: PropTypes.number,\n};\n\nexport default React.memo(Battery);\n\n// Need to work out the ratio of 25px as 100%\n// / 4\n","import React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst Data = ({ data, title, endpoint }) => {\n  const [chartData, setChartData] = useState(undefined);\n  const [showChart, setShowChart] = useState(false);\n\n  const generateSuffix = (label) => {\n    const lowerCaseLabel = label.toLowerCase();\n    if (lowerCaseLabel.includes(\"voltage\")) return \"V\";\n    if (lowerCaseLabel.includes(\"power\")) return \"W\";\n    if (lowerCaseLabel.includes(\"current\")) return \"A\";\n    if (lowerCaseLabel.includes(\"generated\")) return \"kW/h\";\n  };\n\n  const handleShowHideData = async () => {\n    if (!chartData) {\n      await fetch(`http://192.168.0.55:8080/${endpoint}`)\n        .then((response) => response.json())\n        .then((json) => json.map((i) => i.value))\n        .then((data) => {\n          setShowChart(true);\n          setChartData(data);\n          return;\n        });\n    }\n\n    if (chartData && showChart) {\n      setShowChart(false);\n      return;\n    }\n\n    setShowChart(true);\n  };\n\n  const options = {\n    chart: {\n      height: 350,\n      type: \"line\",\n      zoom: {\n        enabled: false,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"straight\",\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n        opacity: 0.5,\n      },\n    },\n  };\n\n  return (\n    <div className=\"data-container\">\n      <h2 className=\"data-container__title\">{title}</h2>\n      {data.map((data, index) => (\n        <div className=\"data-container__data\" key={index}>\n          <p>{data.label}</p>\n          <p>\n            {data.value}\n            <span className=\"data-container__data__suffix\">\n              {generateSuffix(data.label)}\n            </span>\n          </p>\n        </div>\n      ))}\n      <button className=\"data-container__button\" onClick={handleShowHideData}>\n        {showChart ? \"Hide\" : \"Show\"} data chart\n      </button>\n      {showChart && (\n        <Chart\n          type=\"line\"\n          series={[{ name: title, data: chartData }]}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Data;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport { socketUrl } from \"./constants\";\n\nimport Battery from \"./components/battery\";\nimport Data from \"./components/data\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n    const [streamingData, setStreamingData] = useState({\n        solarData: [],\n        batteryData: [],\n        generationStats: [],\n    });\n    const webSocket = useRef(null);\n\n    useEffect(() => {\n        try {\n            webSocket.current = new WebSocket(socketUrl);\n        } catch (error) {\n            console.log(error);\n        }\n\n        webSocket.current.onopen = () => {\n            console.log(\"websocket opened\");\n        };\n\n        webSocket.current.onmessage = (message) => {\n            try {\n                setStreamingData(JSON.parse(message.data));\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        return () => {\n            console.log(\"closing socket\");\n            webSocket.current.close();\n        };\n    }, []);\n\n    const stateOfChange = () => {\n        const SOC = streamingData.batteryData.find(\n            (d) => d.label === \"Battery SOC\"\n        );\n        if (!SOC) return 0;\n        return SOC.value;\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <p>EP Solar - Pi</p>\n                <Battery state={stateOfChange()} />\n            </div>\n            <div className=\"container\">\n                <Data\n                    title=\"Solar\"\n                    data={streamingData.solarData}\n                    endpoint=\"solar\"\n                />\n                <Data\n                    title=\"Battery\"\n                    data={streamingData.batteryData}\n                    endpoint=\"battery\"\n                />\n                <Data\n                    title=\"Generation Stats\"\n                    data={streamingData.generationStats}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}